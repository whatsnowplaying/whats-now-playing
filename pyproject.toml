[build-system]
requires = ["setuptools >= 60", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "NowPlaying"
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.entry-points.pyinstaller40]
hook-dirs = "nowplaying.__pyinstaller:get_hook_dirs"

[project.scripts]
NowPlaying = "nowplaying:main"

[tool.setuptools]
include-package-data = true
packages = [
  "nowplaying",
  "nowplaying.__pyinstaller",
  "nowplaying.artistextras",
  "nowplaying.inputs",
  "nowplaying.processes",
  "nowplaying.recognition",
  "nowplaying.resources",
  "nowplaying.templates",
  "nowplaying.twitch",
  "nowplaying.vendor",
  "nowplaying.vendor.audio_metadata",
  "nowplaying.vendor.audio_metadata.formats",
  "nowplaying.vendor.audio_metadata.tbm_utils",
  "nowplaying.vendor.discogs_client",
  "nowplaying.vendor.pid",
]
license-files = ["LICENSE.txt"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements-run.txt"] }
optional-dependencies = { test = { file = [
  "requirements-test.txt"
] }, dev = { file = ["requirements-dev.txt"] }, docs = { file = [
  "docs/requirements.txt"
] }, osspecials = { file = ["requirements-osspecials.txt"]} }
version = { attr = "nowplaying.version.__VERSION__" }

[tool.setuptools.package-data]
"*" = [
  "*.htm",
  "*.ico",
  "*.LICENSE",
  "*.txt",
  "*.ui",
  ]

[tool.vendoring]
destination = "nowplaying/vendor"
requirements = "vendor.txt"
namespace = "nowplaying.vendor"


[tool.versioningit]
vcs = "git"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.write]
file = "nowplaying/version.py"
template = '''
""" autogenerated version file """
__VERSION__ = '{version}'
__VERSION_DISTANCE__ = {distance}
__VERSION_TUPLE__ = {version_tuple}
__BUILD_DATE__ = '{build_date:%Y-%m-%dT%H:%M:%SZ}'
__CURRENT_TAG__ = '{base_version}'
# pylint: disable=trailing-newlines
'''


[tool.pytest.ini_options]
# initializing qtbot _after_ asyncio or threading just
# breaks pytest horribily so force those tests first
testpaths = ["tests-qt", "tests"]
markers = [
  "seratosettings: custom settings for serato ",
  "templatesettings: custom settings for templates",
]
qt_api = "pyside6"
log_cli = true
addopts = [
  "--cov=nowplaying",
  "--cov-config=.coveragerc",
  "--cov-report=html",
  "-ra",
]
log_level = "DEBUG"
asyncio_mode = "strict"
qt_qapp_name = "testsuite"

[tool.pylint.main]
# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = ["pylint.extensions.no_self_use"]
ignore = ["nowplaying/beam"]
