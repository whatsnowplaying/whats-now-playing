[build-system]
requires = ["setuptools >= 60", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "WhatsNowPlaying"
dynamic = ["version", "dependencies", "optional-dependencies"]
requires-python = ">=3.10,<3.14"

[project.entry-points.pyinstaller40]
hook-dirs = "nowplaying.__pyinstaller:get_hook_dirs"

[project.scripts]
WhatsNowPlaying = "nowplaying.__main__:main"

[tool.coverage.run]
omit = [
  "nowplaying/qtrc.py",
  "nowplaying/vendor/*",
  "nowplaying/__pyinstaller/*",
  ]
concurrency = ["multiprocessing"]
relative_files = true
source = ["nowplaying"]

[tool.coverage.report]
ignore_errors = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise PluginVerifyError"
]

[tool.setuptools]
include-package-data = true
packages = [
  "nowplaying",
  "nowplaying.__pyinstaller",
  "nowplaying.artistextras",
  "nowplaying.inputs",
  "nowplaying.processes",
  "nowplaying.recognition",
  "nowplaying.resources",
  "nowplaying.templates",
  "nowplaying.twitch",
  "nowplaying.vendor",
]
license-files = ["LICENSE.txt"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements-run.txt"] }
optional-dependencies = { binaries = {file = [
  "requirements-binaries.txt"] }, dev = { file = [
  "requirements-dev.txt"] },  docs = { file = [
  "requirements-docs.txt"] },  osspecials = { file = [
  "requirements-osspecials.txt"]}, test = { file = [
  "requirements-test.txt"
] } }
version = { attr = "nowplaying.version.__VERSION__" }

[tool.setuptools.package-data]
"*" = [
  "*.htm",
  "*.ico",
  "*.LICENSE",
  "*.txt",
  "*.ui",
  ]

[tool.pyright]
exclude =["build"]
ignore = ["**/nowplaying/vendor/**",]
pythonVersion = "3.10"
pythonPlatform = "All"
reportUnannotatedClassAttribute = false  # Add this line
include = [
  "nowplaying",
  "nowplaying/artistextras",
  "nowplaying/inputs",
  "nowplaying/processes",
  "nowplaying/recognition",
  "nowplaying/twitch"]

[tool.pytest.ini_options]
# initializing qtbot _after_ asyncio or threading just
# breaks pytest horribily so force those tests first
testpaths = ["tests-qt", "tests"]
markers = [
  "serato3settings: custom settings for older serato",
  "templatesettings: custom settings for templates",
]
qt_api = "pyside6"
#log_cli = true
addopts = [
  "--cov=nowplaying",
  "--cov-report=html",
  "-ra",
  "--durations=10",
]
log_level = "DEBUG"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
qt_qapp_name = "testsuite"

[tool.pylint.main]
# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = ["pylint.extensions.no_self_use"]
init-hook = 'import sys; sys.path.append(".")'
ignore-paths = [
  "nowplaying/qtrc.py",
  "nowplaying/vendor",
  "nowplaying/version.py"
]

[tool.vendoring]
destination = "nowplaying/vendor"
requirements = "vendor.txt"
namespace = "nowplaying.vendor"

[tool.versioningit]
vcs = "git"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.write]
file = "nowplaying/version.py"
template = '''
""" autogenerated version file """
__VERSION__ = '{version}'
__VERSION_DISTANCE__ = {distance}
__VERSION_TUPLE__ = {version_tuple}
__BUILD_DATE__ = '{build_date:%Y-%m-%dT%H:%M:%SZ}'
__CURRENT_TAG__ = '{base_version}'
# pylint: disable=trailing-newlines
'''

[tool.yapf]
column_limit = 100

[tool.yapfignore]
ignore_patterns = [
  "nowplaying/version.py",
  "nowplaying/vendor/**",
  "nowplaying/qtrc.py",
]

[tool.ruff]
line-length = 99
extend-exclude = [
  "nowplaying/version.py",
  "nowplaying/vendor/**",
  "nowplaying/qtrc.py",
]

[tool.ruff.lint]
# Enable pylint-like rule sets
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "I",    # isort
  "N",    # pep8-naming
  "UP",   # pyupgrade
  "YTT",  # flake8-2020
  "S",    # flake8-bandit
  "BLE",  # flake8-blind-except
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "C4",   # flake8-comprehensions
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "SIM",  # flake8-simplify
  "ARG",  # flake8-unused-arguments
  "PTH",  # flake8-use-pathlib
  "PL",   # pylint rules
]

# Ignore specific rules that don't match pylint defaults or project needs
ignore = [
  "S101",   # assert statements (common in tests)
  "T201",   # print statements (may be needed for CLI)
  "PLR0913", # too many arguments (pylint equivalent: R0913)
  "PLR0915", # too many statements (pylint equivalent: R0915)
  "PLR2004", # magic value comparison
  "S603",   # subprocess without shell=True check
  "S607",   # subprocess with partial executable path
]

# Per-file ignores (similar to pylint ignore-paths)
[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "S101",     # assert statements in tests
  "PLR0913",  # many arguments in test functions
  "ARG001",   # unused function arguments (fixtures)
  "S105",     # hardcoded passwords in tests
]

[tool.ruff.lint.pylint]
# Configure pylint-specific rules
max-args = 7
max-locals = 20
max-statements = 60

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around equals signs in keyword arguments
skip-magic-trailing-comma = false
# Indent with spaces
indent-style = "space"
# Keep line breaks in function signatures like yapf
docstring-code-format = true
