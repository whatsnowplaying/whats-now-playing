[build-system]
requires = ["setuptools >= 60", "versioningit"]
build-backend = "setuptools.build_meta"

[project]
name = "NowPlaying"
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.entry-points.pyinstaller40]
hook-dirs = "nowplaying.__pyinstaller:get_hook_dirs"

[project.scripts]
NowPlaying = "nowplaying.__main__:main"

[tool.coverage.run]
omit = [
  "nowplaying/qtrc.py",
  "nowplaying/vendor/*",
  "nowplaying/__pyinstaller/*",
  ]
concurrency = ["multiprocessing"]
relative_files = true
source = ["nowplaying"]

[tool.coverage.report]
ignore_errors = true
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "raise PluginVerifyError"
]

[tool.setuptools]
include-package-data = true
packages = [
  "nowplaying",
  "nowplaying.__pyinstaller",
  "nowplaying.artistextras",
  "nowplaying.inputs",
  "nowplaying.processes",
  "nowplaying.recognition",
  "nowplaying.resources",
  "nowplaying.templates",
  "nowplaying.twitch",
  "nowplaying.vendor",
  "nowplaying.vendor.audio_metadata",
  "nowplaying.vendor.audio_metadata.formats",
  "nowplaying.vendor.audio_metadata.tbm_utils",
  "nowplaying.vendor.discogs_client",
  "nowplaying.vendor.pid",
  "nowplaying.vendor.wptools"
]
license-files = ["LICENSE.txt"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements-run.txt"] }
optional-dependencies = { dev = { file = [
  "requirements-dev.txt"] },  docs = { file = [
  "docs/requirements.txt"] },  osspecials = { file = [
  "requirements-osspecials.txt"]}, test = { file = [
  "requirements-test.txt"
] } }
version = { attr = "nowplaying.version.__VERSION__" }

[tool.setuptools.package-data]
"*" = [
  "*.htm",
  "*.ico",
  "*.LICENSE",
  "*.txt",
  "*.ui",
  ]

[tool.pyright]
exclude =["build"]
ignore = ["**/nowplaying/vendor/**",]
pythonVersion = "3.11"
pythonPlatform = "All"
include = [
  "nowplaying",
  "nowplaying/artistextras",
  "nowplaying/inputs",
  "nowplaying/processes",
  "nowplaying/recognition",
  "nowplaying/twitch"]

[tool.pytest.ini_options]
# initializing qtbot _after_ asyncio or threading just
# breaks pytest horribily so force those tests first
testpaths = ["tests-qt", "tests"]
markers = [
  "seratosettings: custom settings for serato ",
  "templatesettings: custom settings for templates",
]
qt_api = "pyside6"
#log_cli = true
addopts = [
  "--cov=nowplaying",
  "--cov-report=html",
  "-ra",
]
log_level = "DEBUG"
asyncio_mode = "strict"
qt_qapp_name = "testsuite"

[tool.pylint.main]
# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = ["pylint.extensions.no_self_use"]
ignore-paths = [
  "nowplaying/beam",
  "nowplaying/qtrc.py",
  "nowplaying/vendor",
  "nowplaying/version.py"
]

[tool.vendoring]
destination = "nowplaying/vendor"
requirements = "vendor.txt"
namespace = "nowplaying.vendor"

[tool.versioningit]
vcs = "git"

[tool.versioningit.format]
distance = "{base_version}+{distance}.{vcs}{rev}"
dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"

[tool.versioningit.write]
file = "nowplaying/version.py"
template = '''
""" autogenerated version file """
__VERSION__ = '{version}'
__VERSION_DISTANCE__ = {distance}
__VERSION_TUPLE__ = {version_tuple}
__BUILD_DATE__ = '{build_date:%Y-%m-%dT%H:%M:%SZ}'
__CURRENT_TAG__ = '{base_version}'
# pylint: disable=trailing-newlines
'''

[tool.yapf]
column_limit = 100

[tool.yapfignore]
ignore_patterns = [
  "nowplaying/version.py",
  "nowplaying/vendor/**",
  "nowplaying/qtrc.py",
]
